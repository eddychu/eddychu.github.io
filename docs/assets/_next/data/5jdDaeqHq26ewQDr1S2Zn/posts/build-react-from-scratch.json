{"pageProps":{"post":{"type":"file","path":"index","content":{"attributes":{"title":"Build the worst React from scratch","date":"Tue Oct 27 2020 11:09:20 GMT+0800 (China Standard Time)","tags":["React"]},"body":"<p>I&#39;m building a toy react library to learn more about how it works under the hood. All the code here can be found in this github <a href=\"https://github.com/eddychu/simple-react\">repository</a>.</p>\n<h2 id=\"reactcreateelement\">React.createElement</h2>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createElement</span> <span class=\"hljs-params\">(type,props, <span class=\"hljs-rest_arg\">...children</span>)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> {\n        type,\n        props: {\n            ...props,\n            children: children.map(item =&gt; \n                <span class=\"hljs-keyword\">typeof</span> item === <span class=\"hljs-string\">&quot;object&quot;</span> ? item : createTextNode(item)   \n            )\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createTextNode</span> <span class=\"hljs-params\">(value)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> {\n        type: <span class=\"hljs-string\">&quot;TEXT&quot;</span>,\n        props: {\n            nodeValue: value,\n            children: []\n        }\n    }\n}\n</code></pre>\n<p>when building react apps, we don&#39;t use createElement function itself. Instead we describe UI component by using a language called &quot;JSX&quot;. But under the hood the JSX transpiler would call createElement function, which returns the React element object exactly like the code above.</p>\n<h3 id=\"reactdomrender\">ReactDOM.render</h3>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createDom</span>(<span class=\"hljs-params\">element</span>) =&gt; </span>{\n    <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">type</span>, props} = element;\n    <span class=\"hljs-keyword\">const</span> {children} = props;\n    <span class=\"hljs-keyword\">const</span> isDomElement = <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">type</span> === <span class=\"hljs-string\">&quot;string&quot;</span>;\n    <span class=\"hljs-keyword\">let</span> dom;\n    <span class=\"hljs-keyword\">if</span>(isDomElement) {\n        <span class=\"hljs-keyword\">const</span> isTextElement = <span class=\"hljs-keyword\">type</span> === <span class=\"hljs-string\">&quot;TEXT&quot;</span>;\n        dom = isTextElement\n            ? <span class=\"hljs-built_in\">document</span>.createTextNode(props.nodeValue)\n            : <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-keyword\">type</span>);\n        <span class=\"hljs-built_in\">Object</span>.keys(props)\n            .filter(isEvent)\n            .forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">name</span> =&gt;</span> {\n                <span class=\"hljs-keyword\">const</span> eventType = name.toLowerCase().substring(<span class=\"hljs-number\">2</span>);\n                dom.addEventListener(eventType, props[name]);\n            })\n        children.map(<span class=\"hljs-function\"><span class=\"hljs-params\">child</span> =&gt;</span> dom.appendChild(createDom(child)))\n        <span class=\"hljs-keyword\">return</span> dom;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">let</span> element = <span class=\"hljs-keyword\">type</span>(props);\n        <span class=\"hljs-keyword\">return</span> createDom(element)\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">element, container</span>) =&gt; </span>{\n    <span class=\"hljs-keyword\">let</span> dom = createDom(element);\n    container.appendChild(dom);\n}\n</code></pre>\n<p>with this render function implemented. we can manage to create a basic static hello world component and render it in the document. (you need babel to transpile jsx syntax, to simplicify stuff. you can use parcel bundler which do the transpilation automatically.)</p>\n<pre><code><span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\">() =&gt;</span> (<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>)\n</code></pre>\n<h3 id=\"reactusestate\">React.useState</h3>\n<p>A static webpage with nothing changes wouldn&#39;t be exciting. We need to enable state to make the component dynamic.</p>\n<pre><code>    let <span class=\"hljs-literal\">all</span>States = [];\n    let currentStateIndex = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">const</span> useState = (initialValue) =&gt; {\n        if(currentStateIndex === <span class=\"hljs-literal\">all</span>States.length) {\n            <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">state</span> = {\n                value: initialValue,\n                <span class=\"hljs-built_in\">set</span>State(newValue) {\n                    <span class=\"hljs-keyword\">state</span>.value = newValue;\n                    currentStateIndex = <span class=\"hljs-number\">0</span>;\n                }\n            }\n            <span class=\"hljs-literal\">all</span>States.push(<span class=\"hljs-keyword\">state</span>);\n        }\n        <span class=\"hljs-keyword\">const</span> currentState = <span class=\"hljs-literal\">all</span>States[currentStateIndex];\n        currentStateIndex += <span class=\"hljs-number\">1</span>;\n        return [currentState.value, currentState.<span class=\"hljs-built_in\">set</span>State]\n    }\n</code></pre>\n<p>Now we are able to create a simple counter component to count how many times have we clicked it.</p>\n<pre><code>    <span class=\"hljs-keyword\">const</span> Counter = () =&gt; {\n    <span class=\"hljs-keyword\">const</span> [<span class=\"hljs-keyword\">state</span>, <span class=\"hljs-built_in\">set</span>State] = React.useState(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">const</span> handleClick = (e) =&gt; {\n        <span class=\"hljs-built_in\">set</span>State(<span class=\"hljs-keyword\">state</span> + <span class=\"hljs-number\">1</span>);\n    }\n    return <span class=\"hljs-variable\">&lt;h1 onClick={handleClick}&gt;</span>{<span class=\"hljs-keyword\">state</span>}&lt;/h1&gt;\n}\n</code></pre>\n<p>That&#39;s all we need to implement a simplified version of React.</p>\n","bodyBegin":8,"frontmatter":"title: Build the worst React from scratch\ndate: 2020-10-27T03:09:20.631Z\ntags:\n    - React"},"isIndex":true}},"__N_SSG":true}