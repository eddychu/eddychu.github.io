{"componentChunkName":"component---src-templates-blog-post-js","path":"/build-react-from-scratch/","result":{"data":{"site":{"siteMetadata":{"title":"Connecting Dots"}},"markdownRemark":{"id":"aa027b7e-8b60-56d9-a1cd-6c2854d00cac","excerpt":"I’m building a toy react library to learn more about how it works under the hood. All the code here can be found in this github repository. React.createElement…","html":"<p>I’m building a toy react library to learn more about how it works under the hood. All the code here can be found in this github <a href=\"https://github.com/eddychu/simple-react\">repository</a>.</p>\n<h2>React.createElement</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function createElement (type,props, ...children) {\n    return {\n        type,\n        props: {\n            ...props,\n            children: children.map(item =&gt; \n                typeof item === &quot;object&quot; ? item : createTextNode(item)   \n            )\n        }\n    }\n}\n\nfunction createTextNode (value) {\n    return {\n        type: &quot;TEXT&quot;,\n        props: {\n            nodeValue: value,\n            children: []\n        }\n    }\n}</code></pre></div>\n<p>when building react apps, we don’t use createElement function itself. Instead we describe UI component by using a language called “JSX”. But under the hood the JSX transpiler would call createElement function, which returns the React element object exactly like the code above.</p>\n<h3>ReactDOM.render</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function createDom(element) =&gt; {\n    const {type, props} = element;\n    const {children} = props;\n    const isDomElement = typeof type === &quot;string&quot;;\n    let dom;\n    if(isDomElement) {\n        const isTextElement = type === &quot;TEXT&quot;;\n        dom = isTextElement\n            ? document.createTextNode(props.nodeValue)\n            : document.createElement(type);\n        Object.keys(props)\n            .filter(isEvent)\n            .forEach(name =&gt; {\n                const eventType = name.toLowerCase().substring(2);\n                dom.addEventListener(eventType, props[name]);\n            })\n        children.map(child =&gt; dom.appendChild(createDom(child)))\n        return dom;\n    } else {\n        let element = type(props);\n        return createDom(element)\n    }\n}\n\nfunction render(element, container) =&gt; {\n    let dom = createDom(element);\n    container.appendChild(dom);\n}</code></pre></div>\n<p>with this render function implemented. we can manage to create a basic static hello world component and render it in the document. (you need babel to transpile jsx syntax, to simplicify stuff. you can use parcel bundler which do the transpilation automatically.)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const App = () =&gt; (&lt;div&gt;Hello World&lt;/div&gt;)</code></pre></div>\n<h3>React.useState</h3>\n<p>A static webpage with nothing changes wouldn’t be exciting. We need to enable state to make the component dynamic.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    let allStates = [];\n    let currentStateIndex = 0;\n    const useState = (initialValue) =&gt; {\n        if(currentStateIndex === allStates.length) {\n            const state = {\n                value: initialValue,\n                setState(newValue) {\n                    state.value = newValue;\n                    currentStateIndex = 0;\n                }\n            }\n            allStates.push(state);\n        }\n        const currentState = allStates[currentStateIndex];\n        currentStateIndex += 1;\n        return [currentState.value, currentState.setState]\n    }</code></pre></div>\n<p>Now we are able to create a simple counter component to count how many times have we clicked it.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    const Counter = () =&gt; {\n    const [state, setState] = React.useState(0);\n    const handleClick = (e) =&gt; {\n        setState(state + 1);\n    }\n    return &lt;h1 onClick={handleClick}&gt;{state}&lt;/h1&gt;\n}</code></pre></div>\n<p>That’s all we need to implement a simplified version of React.</p>","frontmatter":{"title":"Build the worst React from scratch","date":"October 27, 2020","description":null}},"previous":null,"next":{"fields":{"slug":"/the-life-and-death-of-a-component/"},"frontmatter":{"title":"The life and death of a React Class Component"}}},"pageContext":{"id":"aa027b7e-8b60-56d9-a1cd-6c2854d00cac","previousPostId":null,"nextPostId":"de59d9fc-8b59-58ac-850d-bbc875ec1dbb"}},"staticQueryHashes":["2841359383","916993862"]}